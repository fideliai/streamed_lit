import asyncio
import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

from io import StringIO
from callers import (
    SEASONS,
    collect_weather_data_multiprocess, 
    async_get_temperatures,
    collect_temperatures,
    async_validate_temperature
)


is_uploaded = False
is_api_key_set = False


st.title("–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ø–æ–≥–æ–¥—ã")

st.header("–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö")

uploaded_file = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏ –æ –ø–æ–≥–æ–¥–µ")
if uploaded_file is not None:
    df = pd.read_csv(uploaded_file)
    cities = df["city"].unique()
    is_uploaded = True

if is_uploaded:
    st.header("–ù–∞—Å—Ç—Ä–æ–π–∫–∞")
    
    season_ru = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ–∑–æ–Ω", ["–ó–∏–º–∞", "–í–µ—Å–Ω–∞", "–û—Å–µ–Ω—å", "–õ–µ—Ç–æ"])
    season = SEASONS[season_ru]
    city = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥", cities)

    try:
        api_key = st.text_input("–í–≤–µ–¥–∏—Ç–µ API-–∫–ª—é—á –¥–ª—è OpenWeatherMap")
        temperatures = asyncio.run(async_get_temperatures(city=city, api_key=api_key))
        is_api_key_set = True
    except:
        st.error({"cod": 401, "message": "Invalid API key. Please see https://openweathermap.org/faq#error401 for more info."})
        
if is_api_key_set:
    st.header("–ü–æ–≥–æ–¥–Ω—ã–π –∞–Ω–∞–ª–∏–∑")
    
    weather_data = collect_weather_data_multiprocess(cities=cities, df=df)
    
    st.write(f"–í—ã–±—Ä–∞–Ω–Ω—ã–π –≥–æ—Ä–æ–¥: {city}")
    
    st.write(
        f"""
        –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞
        - –°—Ä–µ–¥–Ω—è—è: {weather_data[city][0]:.2f}¬∞C
        - –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è: {weather_data[city][1]:.2f}¬∞C
        - –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è: {weather_data[city][2]:.2f}¬∞C
        """
    )
    st.write("–ü—Ä–æ—Ñ–∏–ª—å —Å–µ–∑–æ–Ω–∞")
    st.dataframe(weather_data[city][3])
    
    st.write("–ü–æ–≥–æ–¥–Ω—ã–π —Ç—Ä–µ–Ω–¥")
    st.line_chart(data=weather_data[city][4], x="timestamp", y="trend")
    
    st.write("–ê–Ω–æ–º–∞–ª—å–Ω—ã–µ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã")
    fig, ax = plt.subplots()
    sns.scatterplot(data=weather_data[city][5], x="timestamp", y="temperature", hue="is_anomaly", ax=ax)
    st.pyplot(fig)

    st.subheader(f"–ù–æ—Ä–º–∞–ª—å–Ω–∞—è –ª–∏ —Å–µ–π—á–∞—Å –ø–æ–≥–æ–¥–∞ –≤ {city}, –≤ —Å–µ–∑–æ–Ω {season_ru}? üå°Ô∏è")

    if st.button("–•–æ—á—É —É–∑–Ω–∞—Ç—å"):
        temperatures = asyncio.run(collect_temperatures(cities=cities, api_key=api_key))
        
        st.write(f"–¢–µ–∫—É—â–∞—è –ø–æ–≥–æ–¥–∞: {temperatures[city]:.2f}¬∞C")
    
        validations = asyncio.run(async_validate_temperature(cities=cities, df=df, api_key=api_key, season=season))
        validation = validations[city]
    
        st.success(f"–ê–Ω–∞–ª–∏–∑ –Ω–æ—Ä–º–∞–ª—å–Ω–æ—Å—Ç–∏ –ø–æ–≥–æ–¥—ã –≤ {city}: {validation}")
        
